{
  
    
        "post0": {
            "title": "Rates of Covid19 in Madrid",
            "content": "!pip install geopandas import pandas as pd import numpy as np import re import geopandas import plotnine from plotnine import * import matplotlib.pyplot as plt import matplotlib.tri as tri from mpl_toolkits.axes_grid1 import make_axes_locatable from sklearn.metrics import confusion_matrix %matplotlib inline . . Covid19 Weekly Data from the &#39;Comunidad de Madrid&#39; . https://datos.comunidad.madrid/catalogo/dataset/covid19_tia_zonas_basicas_salud . Covid 19-TIA Zonas B&#225;sicas de Salud (CSV) . On a Tuesday morning, weekly data are provided for the 286 basic health areas: . confirmed cases and rate of accumulated incidence for basic health areas | the source of data is the Madrid region&#39;s network of epidemiological vigilence | the data are continually updated; you should always show the date when the data were accessed | the polygon data includes the population figures from the region&#39;s statistical institute from the population register of 1 January 2019. | . &quot;Información epidemiológica Covid-19: Casos confirmados y tasa de incidencia acumulada (TIA) por Zonas Básicas de Salud (Decreto 52/2010, de 29 de julio, BOCM 9 de agosto de 2010). Informe diario o semanal con datos de casos confirmados, casos confirmados con infección activa y tasas de incidencia acumulada de los últimos 14 días y desde el inicio de la epidemia (25 de febrero de 2020). La fuente de los datos es la Red de Vigilancia Epidemiológica de la Comunidad de Madrid. Cuando se utilicen los datos se debe indicar en qué fecha se ha accedido a los mismos, dada su actualización continua. Hasta el 1 de julio de 2020 los registros de datos correspondientes a cada fecha de informe se han añadido diariamente. A partir del 2 de julio de 2020 la actualización pasa a ser semanal. A fecha 1 de junio, se ha procedido a actualizar el conjunto de datos de Zonas Básicas de Salud, con los datos actualizados de geometrías proporcionados por el Instituto de Estadística de la Comunidad de Madrid. Las nuevas geometrías incluyen los datos poblacionales actualizados por el Instituto de Estadística de la Comunidad de Madrid, relativos al Padrón Continuo a 1 de enero de 2019.&quot; . Here we will read the CSV data dated 22 September 2020 and explore: . zones_df=pd.read_csv(&#39;covid19_tia_zonas_basicas_salud_s.csv&#39;, delimiter=&#39;;&#39;, encoding=&#39;latin&#39;) . print (&#39;Columns:&#39;) [print(col) for col in list(zones_df.columns)] print() print(&#39;Shape: &#39;,zones_df.shape) print() print(&#39;Dates: &#39;,list(zones_df.fecha_informe.unique())) . . Columns: zona_basica_salud fecha_informe casos_confirmados_activos_ultimos_14dias tasa_incidencia_acumulada_activos_ultimos_14dias casos_confirmados_ultimos_14dias tasa_incidencia_acumulada_ultimos_14dias casos_confirmados_totales tasa_incidencia_acumulada_total codigo_geometria Shape: (5148, 9) Dates: [&#39;2020/09/22 09:42:00&#39;, &#39;2020/09/15 10:23:00&#39;, &#39;2020/09/08 11:03:00&#39;, &#39;2020/09/01 09:33:00&#39;, &#39;2020/08/25 09:33:00&#39;, &#39;2020/08/18 09:32:00&#39;, &#39;2020/08/11 09:31:00&#39;, &#39;2020/08/04 09:58:00&#39;, &#39;2020/07/28 09:34:00&#39;, &#39;2020/07/21 09:23:00&#39;, &#39;2020/07/14 09:23:00&#39;, &#39;2020/07/07 09:32:00&#39;, &#39;2020/06/30 07:00:00&#39;, &#39;2020/06/23 07:00:00&#39;, &#39;2020/06/16 07:00:00&#39;, &#39;2020/06/09 07:00:00&#39;, &#39;2020/06/02 07:00:00&#39;, &#39;2020/05/26 07:00:00&#39;] . Tidy-up the dataframe by . replacing decimal , with decimal . | shortening key column names | dropping time from the date column | . for col in [&#39;tasa_incidencia_acumulada_activos_ultimos_14dias&#39;, &#39;tasa_incidencia_acumulada_ultimos_14dias&#39;, &#39;tasa_incidencia_acumulada_total&#39;]: zones_df[col] = pd.to_numeric(zones_df[col].apply(lambda x: re.sub(&#39;,&#39;, &#39;.&#39;, x))) zones_df.rename(columns={&#39;zona_basica_salud&#39;:&#39;zona_basic&#39;,&#39;tasa_incidencia_acumulada_ultimos_14dias&#39;:&#39;tasa&#39;, &#39;casos_confirmados_ultimos_14dias&#39;:&#39;casos&#39;}, inplace=True) zones_df.fecha_informe=zones_df.fecha_informe.apply(lambda x: x[5:10]) . Data for the centre of Madrid (where the main office of the regional authority are located). . zones_df[zones_df.zona_basic==&#39;Cortes&#39;].T . 60 346 632 918 1204 1490 1776 2062 2363 2634 2920 3206 3492 3778 4064 4350 4636 4922 . zona_basic Cortes | Cortes | Cortes | Cortes | Cortes | Cortes | Cortes | Cortes | Cortes | Cortes | Cortes | Cortes | Cortes | Cortes | Cortes | Cortes | Cortes | Cortes | . fecha_informe 09/22 | 09/15 | 09/08 | 09/01 | 08/25 | 08/18 | 08/11 | 08/04 | 07/28 | 07/21 | 07/14 | 07/07 | 06/30 | 06/23 | 06/16 | 06/09 | 06/02 | 05/26 | . casos_confirmados_activos_ultimos_14dias 67 | 18 | 17 | 14 | 17 | 33 | 15 | 19 | 10 | NaN | NaN | NaN | NaN | NaN | 7 | NaN | NaN | NaN | . tasa_incidencia_acumulada_activos_ultimos_14dias 254.25 | 68.31 | 64.51 | 53.13 | 64.51 | 125.23 | 56.92 | 72.1 | 37.95 | 18.97 | 15.18 | 3.79 | 3.79 | 18.97 | 26.56 | 15.18 | 3.79 | 3.79 | . casos 188 | 188 | 169 | 147 | 89 | 64 | 49 | 27 | 19 | 7 | NaN | NaN | NaN | 8 | 10 | 10 | 7 | NaN | . tasa 713.42 | 713.42 | 641.32 | 557.83 | 337.74 | 242.87 | 185.94 | 102.46 | 72.1 | 26.56 | 18.97 | 7.59 | 11.38 | 30.36 | 37.95 | 37.95 | 26.56 | 15.18 | . casos_confirmados_totales 820 | 713 | 613 | 522 | 429 | 365 | 332 | 293 | 281 | 264 | 261 | 251 | 246 | 245 | 242 | 236 | 231 | 226 | . tasa_incidencia_acumulada_total 3111.72 | 2705.68 | 2326.2 | 1980.87 | 1627.96 | 1385.09 | 1259.87 | 1111.87 | 1066.33 | 1001.82 | 990.44 | 952.49 | 933.52 | 929.72 | 918.34 | 895.57 | 876.59 | 857.62 | . codigo_geometria 061 | 061 | 061 | 061 | 061 | 061 | 061 | 061 | | 061 | 061 | 061 | 061 | 061 | 061 | 061 | 061 | 061 | . fig, ax = plt.subplots(1,1,figsize=(10,5)) plt.plot(zones_df[zones_df.zona_basic==&#39;Cortes&#39;].fecha_informe[::-1], zones_df[zones_df.zona_basic==&#39;Cortes&#39;].casos[::-1]) plt.title(&#39;Cases confirmed in the last 14 days - Cortes&#39;); . fig, ax = plt.subplots(1,1,figsize=(10,5)) plt.plot(zones_df[zones_df.zona_basic==&#39;Cortes&#39;].fecha_informe[::-1], zones_df[zones_df.zona_basic==&#39;Cortes&#39;].tasa[::-1]) plt.ylim(0,1000) plt.title(&#39;Rate of accumulated incidence for 100 000 people in the last 14 days - Cortes&#39;); . print(len(zones_df.zona_basic.unique())) print(zones_df.zona_basic.unique()[:10]) . 286 [&#39;Abrantes&#39; &#39;Acacias&#39; &#39;Adelfas&#39; &#39;Alameda&#39; &#39;Alameda de Osuna&#39; &#39;Alcalde Bartolomé González&#39; &#39;Alcalá de Guadaira&#39; &#39;Alcobendas - Chopera&#39; &#39;Alcocer&#39; &#39;Algete&#39;] . Allocate to bins based on rate . zones_df.tasa.fillna(0, inplace=True) cut_labels=[&#39;&lt;200&#39;,&#39;200-400&#39;,&#39;400-600&#39;,&#39;600-800&#39;,&#39;800-1000&#39;,&#39;&gt;1000&#39;] cut_bins = [-1., 200., 400., 600., 800., 1000., max(zones_df.tasa)] zones_df[&#39;tasa_bin&#39;] = pd.cut(zones_df.tasa, bins=cut_bins, labels=cut_labels) zones_df.tasa_bin.value_counts() . &lt;200 3667 200-400 633 400-600 397 600-800 212 &gt;1000 126 800-1000 113 Name: tasa_bin, dtype: int64 . Helper function to check for errors in the presentation of the names, e.g. spaces, &#39;de&#39;,... . def check_zones(zonas_restricted): lst=[] for zona_basic in zones_df.zona_basic[:286]: if zona_basic in zonas_restricted: lst.append(zona_basic) print(len(lst), set(zonas_restricted)-set(lst)) . . Identify the initial 37 areas restricted from 21 September 2020: . zonas_restricted_1=[&quot;Puerta Bonita&quot;,&quot;Vista Alegre&quot;,&quot;Guayaba&quot;, &quot;Almendrales&quot;, &quot;Las Calesas&quot;, &quot;Zofío&quot;, &quot;Orcasur&quot;, &quot;San Fermín&quot;, &quot;San Andrés&quot;, &quot;San Cristóbal&quot;, &quot;El Espinillo&quot;, &quot;Los Rosales&quot;, &quot;Villa Vallecas&quot;, &quot;Entrevías&quot;, &quot;Martínez de la Riva&quot;, &quot;San Diego&quot;, &quot;Numancia&quot;, &quot;Peña Prieta&quot;, &quot;Pozo de Tío Raimundo&quot;, &quot;Ángela Uriarte&quot;, &quot;Alcalá de Guadaira&quot;, &quot;Federica Montseny&quot;, &quot;Doctor Cirajas&quot;, &quot;Gandhi&quot;, &quot;Daroca&quot;, &quot;La Elipa&quot;, &quot;Alicante&quot;, &quot;Cuzco&quot;, &quot;Francia&quot;, &quot;Humanes de Madrid&quot;, &quot;San Blas&quot;, &quot;Isabel II&quot;, &quot;Las Margaritas&quot;, &quot;Sánchez Morate&quot;, &quot;Reyes Católicos&quot;, &quot;Alcobendas - Chopera&quot;, &quot;Miraflores&quot;] check_zones(zonas_restricted_1) . 37 set() . Identify the additional 8 areas restricted from 28 September 2020: . zonas_restricted_2=[&quot;Panaderas&quot;, &quot;Doctor Trueta&quot;, &quot;Miguel Servet&quot;, &quot;Campo de la Paloma&quot;, &quot;Rafael Alberti&quot;, &quot;García Noblejas&quot;, &quot;Vicálvaro - Artilleros&quot;,&quot;Orcasitas&quot;] check_zones(zonas_restricted_2) . 8 set() . Label zones with restricted group . zones_df[&#39;restricted&#39;]=&#39;0&#39; for i in range(len(zonas_restricted_1)): zones_df.loc[zones_df.zona_basic==zonas_restricted_1[i], &#39;restricted&#39;]=&#39;1&#39; for i in range(len(zonas_restricted_2)): zones_df.loc[zones_df.zona_basic==zonas_restricted_2[i], &#39;restricted&#39;]=&#39;2&#39; zones_df.restricted.value_counts()/len(zones_df.fecha_informe.unique()) . 0 241.0 1 37.0 2 8.0 Name: restricted, dtype: float64 . Helper function to reorder the presenation of the dates . def col_func(fecha): return fecha[3]+fecha[4]+fecha[2]+fecha[0]+fecha[1] . . Histograms of number of zones in each category in the last 6 weeks . plotnine.options.figure_size = (14, 8) ggplot(zones_df[zones_df.fecha_informe&gt;&#39;08/17&#39;], aes(x=&#39;tasa_bin&#39;, fill=&#39;restricted&#39;)) + geom_histogram(binwidth=1, alpha=0.6, position=&#39;stack&#39;) + facet_wrap(&#39;fecha_informe&#39;, labeller=labeller(cols=col_func)) + theme_minimal() + labs(title=&quot;Zonas básicas de salud&quot;, x=&#39;Tasa incidencia acumulada ultimos 14 días&#39;, y=&quot;Número de zonas&quot;) + scale_fill_brewer(palette = &#39;Reds&#39;) . &lt;ggplot: (-9223363253940595610)&gt; . Maps for the most recent week . week_df=zones_df[zones_df.fecha_informe==zones_df.fecha_informe.unique().max()][[&#39;zona_basic&#39;,&#39;tasa&#39;,&#39;casos&#39;,&#39;tasa_bin&#39;,&#39;restricted&#39;]] df=(geopandas.read_file(&#39;./maps/zonas_basicas_salud.shp&#39;)).merge(week_df) df[&#39;geometry_pt&#39;]=df.geometry.centroid df.head().T . 0 1 2 3 4 . codigo_geo 001 | 002 | 003 | 004 | 005 | . pob_pad19 30748 | 19432 | 29168 | 21274 | 29001 | . zona_basic Abrantes | Acacias | Adelfas | Alameda | Alameda de Osuna | . geometry POLYGON ((439068.7580000004 4470731.660800001,... | POLYGON ((439924.9298999999 4472798.281400001,... | POLYGON ((443455.7175000003 4472836.7236, 4434... | POLYGON ((440659.7537000002 4473778.4014, 4406... | POLYGON ((452408.1383999996 4484644.699999999,... | . tasa 897.62 | 478.59 | 596.54 | 864.91 | 682.74 | . casos 276 | 93 | 174 | 184 | 198 | . tasa_bin 800-1000 | 400-600 | 400-600 | 800-1000 | 600-800 | . restricted 0 | 0 | 0 | 0 | 0 | . geometry_pt POINT (438360.9828817752 4470073.107306919) | POINT (439858.3553289876 4472447.600519221) | POINT (442903.0377880885 4472532.970746173) | POINT (440836.3215957115 4473539.390589811) | POINT (451700.7212964218 4480650.657189403) | . Maps of rate of accumulated instance and restricted zones . fig, (ax1, ax2) = plt.subplots(ncols=2, sharex=True, sharey=True, figsize=(12,6)) df.plot(ax=ax1, column=df.tasa_bin, cmap=&#39;Reds&#39;, legend=True) df.plot(ax=ax1, color=&#39;white&#39;, edgecolor=&#39;grey&#39;, alpha=0.1) ax1.set_title(&#39;Rate of accumulated instance&#39;) ax1.axis(&#39;off&#39;) df.plot(ax=ax2, column=df.restricted, cmap=&#39;Reds&#39;, legend=True) df.plot(ax=ax2, color=&#39;white&#39;, edgecolor=&#39;grey&#39;, alpha=0.1) ax2.set_title(&#39;Restricted zones&#39;) ax2.axis(&#39;off&#39;); . df.tasa_bin.value_counts() . 400-600 102 600-800 70 &gt;1000 47 800-1000 37 200-400 28 &lt;200 2 Name: tasa_bin, dtype: int64 . df.restricted.value_counts() . 0 241 1 37 2 8 Name: restricted, dtype: int64 . Treating the rate as a surface and plotting contours . Linear interpolation of the rate at the centroid of each zone . def getXY(pt): return (pt.x, pt.y) . def data_for_week(fecha): week_df=zones_df[zones_df.fecha_informe==fecha][[&#39;zona_basic&#39;,&#39;tasa&#39;,&#39;casos&#39;,&#39;tasa_bin&#39;,&#39;restricted&#39;]] df=geopandas.read_file(&#39;./maps/zonas_basicas_salud.shp&#39;).merge(week_df) x, y = [list(t) for t in zip(*map(getXY, df.geometry.centroid))] z = df.tasa return x,y,z . def multi_plot(i): fecha=weeks[i] x,y,z = data_for_week(fecha) fig, ax = plt.subplots(1,1,figsize=(10,8)) ax.set(xlim=(360000, 500000), ylim=(4420000, 4550000)) cntr = ax.tricontourf(x, y, z, [0,200,400,800,1000,2000], cmap=&quot;Reds&quot;) # plot contour fill df.plot(color=&#39;white&#39;, edgecolor=&#39;grey&#39;, alpha=0.1, ax=ax) divider = make_axes_locatable(ax) cax = divider.append_axes(&quot;right&quot;, size=&quot;5%&quot;, pad=0.0) fig.colorbar(cntr, drawedges=False, cax=cax) ax.set_title(f&#39;Tasa incidencia acumulada en los últimos 14 días n fecha {fecha[3]+fecha[4]+fecha[2]+fecha[0]+fecha[1]}, maximum {str(int(max(z)))}/100000 habitantes&#39;) ax.axis(&#39;off&#39;) . weeks = zones_df.fecha_informe.unique()[:8][::-1] for i in range(len(weeks)): multi_plot(i) . Plots for 4 weeks . def plot_4_weeks(plot_weeks): fig, axs = plt.subplots(1, 4, figsize=(16, 4)) for i in range(4): fecha=plot_weeks[i] x,y,z = data_for_week(plot_weeks[i]) df.plot(color=&#39;white&#39;, edgecolor=&#39;grey&#39;, alpha=0.1, ax=axs[i]) axs[i].set_title(f&#39; nfecha {fecha[3]+fecha[4]+fecha[2]+fecha[0]+fecha[1]} nmax. {str(int(max(z)))}/100000 hab.&#39;, fontsize=8) axs[i].axis(&#39;off&#39;) cntr=axs[i].tricontourf(x,y,z,[0,200,400,800,1000,2000], cmap=&quot;Reds&quot;) divider = make_axes_locatable(axs[-1]) cax = divider.append_axes(&quot;right&quot;, size=&quot;3%&quot;, pad=0.0) fig.colorbar(cntr, drawedges=False, cax=cax) fig.suptitle(&#39;Tasa incidencia acumulada en los últimos 14 días&#39;, fontsize=12, va=&#39;baseline&#39;) plt.savefig(&#39;four_weeks.png&#39;, bbox_inches=&#39;tight&#39;); . . plot_4_weeks(weeks[:4]) . plot_4_weeks(weeks[4:]) . Confusion matrix for rate &gt; 1000 and restrictions . week_df=zones_df[zones_df.fecha_informe==zones_df.fecha_informe.max()][[&#39;zona_basic&#39;,&#39;tasa&#39;,&#39;casos&#39;,&#39;tasa_bin&#39;,&#39;restricted&#39;]] df=(geopandas.read_file(&#39;./maps/zonas_basicas_salud.shp&#39;)).merge(week_df) print(confusion_matrix((df.restricted != &#39;0&#39;)*1, (df.tasa&gt;1000)*1)) . [[233 8] [ 6 39]] . 233 zones with rate less than 1000 and no restrictions. | 39 zones with rate over 1000 and restrictions. | . 8 zones with rate over 1000 but no restrictions . df[(df.restricted == &#39;0&#39;) &amp; (df.tasa&gt;1000)].sort_values(&#39;tasa&#39;, ascending=False).zona_basic.to_list() . [&#39;San Isidro&#39;, &#39;Las Fronteras&#39;, &#39;Canillejas&#39;, &#39;Villaamil&#39;, &#39;Sierra de Guadarrama&#39;, &#39;Villa del Prado&#39;, &#39;Lavapiés&#39;, &#39;Alcalde Bartolomé González&#39;] . 6 zones with rate under 1000 but restricted . df[(df.restricted != &#39;0&#39;) &amp; (df.tasa&lt;1000)].sort_values(&#39;tasa&#39;, ascending=False).zona_basic.to_list() . [&#39;Villa Vallecas&#39;, &#39;El Espinillo&#39;, &#39;Sánchez Morate&#39;, &#39;Isabel II&#39;, &#39;San Fermín&#39;, &#39;Francia&#39;] . Comparison of individual zones to the best and worst . df_tmp=zones_df[zones_df.fecha_informe==zones_df.fecha_informe.max()] most = df_tmp[df_tmp.tasa==df_tmp.tasa.max()].zona_basic.to_list()[0] least = df_tmp[df_tmp.tasa==df_tmp.tasa.min()].zona_basic.to_list()[0] most, least . (&#39;Puerta Bonita&#39;, &#39;Rascafría&#39;) . zona = &#39;Cortes&#39; df_tmp = zones_df.pivot_table(values=&#39;tasa&#39;, index=&#39;fecha_informe&#39;, columns=&#39;zona_basic&#39;).reset_index() zbs = [most, zona, least] title= zbs[1] + &#39; compared to least (&#39; + zbs[2] + &#39;) and most (&#39; + zbs[0] + &#39;)&#39; ggplot(df_tmp, aes(x=&#39;fecha_informe&#39;,y=zbs[1],group=1)) + geom_point(colour=&#39;blue&#39;, alpha = 0.5) + geom_line(aes(y=zbs[1]), colour=&#39;blue&#39;) + geom_smooth(aes(y=zbs[0]), colour=&#39;red&#39; ) + geom_smooth(aes(y=zbs[2]), colour=&#39;green&#39;) + labs(title=title, x=&#39;Fecha informe&#39;, y=&quot;Tasa&quot;) + geom_text(data=df_tmp[df_tmp.fecha_informe==&#39;09/22&#39;],label=zbs[1], color=&#39;blue&#39;, hjust= &#39;right&#39;, vjust=&#39;bottom&#39;) + theme_minimal() . /usr/local/lib/python3.6/dist-packages/plotnine/stats/smoothers.py:168: PlotnineWarning: Confidence intervals are not yet implementedfor lowess smoothings. &#34;for lowess smoothings.&#34;, PlotnineWarning) . &lt;ggplot: (8782914197768)&gt; .",
            "url": "https://alisondavey.github.io/fastpages/2020/09/29/Covid19Data.html",
            "relUrl": "/2020/09/29/Covid19Data.html",
            "date": " • Sep 29, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Basic Health Areas in Madrid",
            "content": "Since Monday, 21 September 2020 basic health zones have been used in Madrid to impose restrictions on the population in the fight against Covid19. This came as a surprise to the local population - they knew the name of their zone from the name of their health centre but had no idea about what area is served by the health centre. . In this series of block posts I would like to explore the public data on the second wave of Covid19 infections in Madrid using Jupyter notebooks that run on Google Colab and non-proprietory software. You too can access the data, run these notebooks and explore the data yourself. . If you are interested graphical analysis of the Covid19 crisis, I recommend the work of Kiko Llaneras and the team at El País. . This introductory notebook locates polygon data for these basic health zones and the detailed maps showing the area each zone serves. . Libraries to install and import: . !pip install geopandas !apt-get install poppler-utils !pip install pdf2image import geopandas import matplotlib.pyplot as plt from mpl_toolkits.axes_grid1 import make_axes_locatable from pdf2image import convert_from_path, convert_from_bytes from pdf2image.exceptions import (PDFInfoNotInstalledError,PDFPageCountError,PDFSyntaxError) from PIL import Image . . Introduction to &#39;Zonas B&#225;sicas de Salud&#39; in the &#39;Comunidad de Madrid&#39; . The Comunidad de Madrid provides polygon data of the basic health zones as &#39;shape&#39; files. . These can be read using geopandas. . División territorial en zonas básicas de salud de la Comunidad de Madrid . https://datos.comunidad.madrid/catalogo/dataset/covid19_tia_zonas_basicas_salud/resource/f1837bd3-a835-4110-9bbf-fae06c99b56b . df=geopandas.read_file(&#39;./maps/zonas_basicas_salud.shp&#39;) df.head() . codigo_geo pob_pad19 zona_basic geometry . 0 001 | 30748 | Abrantes | POLYGON ((439068.758 4470731.661, 439076.433 4... | . 1 002 | 19432 | Acacias | POLYGON ((439924.930 4472798.281, 439928.742 4... | . 2 003 | 29168 | Adelfas | POLYGON ((443455.718 4472836.724, 443412.985 4... | . 3 004 | 21274 | Alameda | POLYGON ((440659.754 4473778.401, 440665.227 4... | . 4 005 | 29001 | Alameda de Osuna | POLYGON ((452408.138 4484644.700, 452415.138 4... | . df.info() . &lt;class &#39;geopandas.geodataframe.GeoDataFrame&#39;&gt; RangeIndex: 286 entries, 0 to 285 Data columns (total 4 columns): # Column Non-Null Count Dtype -- -- 0 codigo_geo 286 non-null object 1 pob_pad19 286 non-null int64 2 zona_basic 286 non-null object 3 geometry 286 non-null geometry dtypes: geometry(1), int64(1), object(2) memory usage: 9.1+ KB . plt.hist(df.pob_pad19) plt.title(&#39;Distribution of population by areas&#39;) plt.ylabel(&#39;Number of areas&#39;) plt.box(False) plt.xlabel(&#39;Population&#39;); . df.describe() . pob_pad19 . count 286.000000 | . mean 23298.580420 | . std 9935.956169 | . min 2636.000000 | . 25% 16702.250000 | . 50% 21829.000000 | . 75% 28164.250000 | . max 63789.000000 | . df[df.pob_pad19==df.pob_pad19.min()] . codigo_geo pob_pad19 zona_basic geometry . 221 222 | 2636 | Rascafría | POLYGON ((436250.375 4539098.529, 436255.925 4... | . df[df.pob_pad19==df.pob_pad19.max()] . codigo_geo pob_pad19 zona_basic geometry . 158 159 | 63789 | Mar Báltico | POLYGON ((447970.223 4484559.958, 447972.423 4... | . There are 286 basic health zones, with an average population of around 23_000 people: the Rascafría area has only 2_636 people; the Mar Báltico area has 63_789 people. . df[&quot;area_sq_km&quot;] = df[&#39;geometry&#39;].area/1_000_000 df[&#39;pob_densidad_sq_km&#39;] = df.pob_pad19/df.area_sq_km df.head() . codigo_geo pob_pad19 zona_basic geometry area_sq_km pob_densidad_sq_km . 0 001 | 30748 | Abrantes | POLYGON ((439068.758 4470731.661, 439076.433 4... | 1.572304 | 19556.009302 | . 1 002 | 19432 | Acacias | POLYGON ((439924.930 4472798.281, 439928.742 4... | 0.774111 | 25102.351889 | . 2 003 | 29168 | Adelfas | POLYGON ((443455.718 4472836.724, 443412.985 4... | 0.852828 | 34201.514571 | . 3 004 | 21274 | Alameda | POLYGON ((440659.754 4473778.401, 440665.227 4... | 0.545204 | 39020.288131 | . 4 005 | 29001 | Alameda de Osuna | POLYGON ((452408.138 4484644.700, 452415.138 4... | 35.137286 | 825.362547 | . fig, (ax1, ax2) = plt.subplots(ncols=2, sharex=True, sharey=True, figsize=(12,6)) df.plot(ax=ax1, column=df.pob_pad19, cmap=&#39;Reds&#39;, legend=True) df.plot(ax=ax1, color=&#39;white&#39;, edgecolor=&#39;grey&#39;, alpha=0.1) ax1.set_title(&#39;Total population n by basic health area&#39;) ax1.axis(&#39;off&#39;) df.plot(ax=ax2, column=df.pob_densidad_sq_km, cmap=&#39;Reds&#39;, legend=True) df.plot(ax=ax2, color=&#39;white&#39;, edgecolor=&#39;grey&#39;, alpha=0.1) ax2.set_title(&#39;Population density n by basic health area&#39;) ax2.axis(&#39;off&#39;); . df[df.pob_densidad_sq_km==df.pob_densidad_sq_km.min()] . codigo_geo pob_pad19 zona_basic geometry area_sq_km pob_densidad_sq_km . 221 222 | 2636 | Rascafría | POLYGON ((436250.375 4539098.529, 436255.925 4... | 258.120579 | 10.212281 | . df[df.pob_densidad_sq_km==df.pob_densidad_sq_km.max()] . codigo_geo pob_pad19 zona_basic geometry area_sq_km pob_densidad_sq_km . 160 161 | 17331 | Martín de Vargas | POLYGON ((440449.700 4472841.620, 440459.695 4... | 0.307034 | 56446.431071 | . print(f&#39;The Madrid region has an area of {int(df.area.sum()/1000000)} sq km, a population of {df.pob_pad19.sum()} and a population density of {int(1000000*df.pob_pad19.sum()/df.area.sum())} people per sq km.&#39;) . The Madrid region has an area of 8025 sq km, a population of 6663394 and a population density of 830 people per sq km. . Rascafría has a population density of only 10 people per sq km; Martín de Vargas has a population of 56_446 people per sq km. . Detailed maps are provided for each zone . List of zones: | . Mapas de Zonas Básicas de Salud del Área Única de la Comunidad de Madrid . https://www.madrid.org/iestadis/fijas/estructu/general/territorio/estructucartemzbs.htm . Individual maps: | . https://www.madrid.org/iestadis/fijas/estructu/general/territorio/descarga/zbs13_mar_baltico.pdf . (maps have been downloaded and stored in ./maps/...) . Conversion of maps from .pdf to .jpg: . convert_from_path(&#39;./maps/zbs13_mar_baltico.pdf&#39;)[0].resize((1414,1000)).save(&#39;./maps/159_mar_baltico.jpg&#39;) convert_from_path(&#39;./maps/zbs13_rascafria.pdf&#39;)[0].resize((1414,1000)).save(&#39;./maps/222_rascafria.jpg&#39;) convert_from_path(&#39;./maps/zbs13_martin_de_vargas.pdf&#39;)[0].resize((1414,1000)).save(&#39;./maps/161_martin_de_vargas.jpg&#39;) . . Image.open(&#39;./maps/222_rascafria.jpg&#39;) . Image.open(&#39;./maps/159_mar_baltico.jpg&#39;) . Image.open(&#39;./maps/161_martin_de_vargas.jpg&#39;) .",
            "url": "https://alisondavey.github.io/fastpages/madrid/covid19/2020/09/28/intro.html",
            "relUrl": "/madrid/covid19/2020/09/28/intro.html",
            "date": " • Sep 28, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://alisondavey.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://alisondavey.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}